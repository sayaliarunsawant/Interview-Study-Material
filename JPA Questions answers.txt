1. What is JPA?
	JPA (Java Persistence API) is a Java EE and Java SE specification that describes a management system for saving java objects to relational database tables in a convenient form. Java itself does not contain JPA implementations, however there are many implementations of this specification from different companies (open and not). This is not the only way to save java objects in databases (ORM systems), but one of the most popular in the Java world.

2. What is the difference between JPA and Hibernate?
	Hibernate is one of the most popular open source implementations of the latest specification (JPA 2.1). Even more likely the most popular, almost standard de facto. That is, JPA only describes rules and APIs, and Hibernate implements these descriptions, however Hibernate (like many other JPA implementations) has additional features not described in JPA (and not portable to other JPA implementations).

3. Is it possible to use JPA with noSQl databases?
	In general, the JPA specification says only about mapping java objects into relational database tables, but there are a number of implementations of this standard for noSql databases: Kundera, DataNucleus, ObjectDB, and a number of others. Naturally, not all specification-specific features for relational databases are transferred to nosql databases completely.

4. What is the difference between JPA and JDO?
		JPA (Java Persistence API) and Java Data Objects (JDO) are two specifications for storing java objects in databases. If JPA is concentrated only on relational databases, then JDO is a more general specification that describes the ORM for any possible bases and repositories.
		In principle, JPA can be viewed as part of the JDO specification specialized in relational databases, even though the API of these two specifications does not completely match. The “developers” of specifications also differ – if JPA is developed as JSR, then JDO was first developed as JSR, now it is developed as an Apache JDO project.
		
5. What is Entity?
		Entity is a lightweight persistent domain object. The main program entity is the entity class, which can also use additional classes that can be used as auxiliary classes or to maintain state of the entity.
		
6. Can the Entity class inherit from non-Entity classes?
		yes.
		
7. Can an Entity class inherit from other Entity classes?
		Yes.
		
		
8. Can a non-Entity class inherit from an Entity class?
		And this is also permissible.
		
9. Can Entity be an abstract class?
		Perhaps, at the same time, it retains all the properties of the Entity, except that it cannot be directly initialized.
		
		Java Persistence API Interview Questions
10. What JPA requirements for Entity classes can you list (at least six requirements)?
		1) Entity class must be annotated with Entity or described in the XML configuration file JPA,
		
		2) Entity class must contain a public or protected constructor with no arguments (it can also have constructors with arguments),
		
		3) Entity class must be a top-level class (top -level class),
		
		4) Entity class cannot be enum or interface,
		
		5) Entity class cannot be final class,
		
		6) Entity class cannot contain final fields or methods if they participate in mapping (persistent final methods or persistent final instance variables),
		
		7) If an Entity class object is passed by value as a separate object (detached object), for example through a remote interface (through a remote interface), it must also implement a Serializable interface,
		
		8) The Entity class fields should be directly accessible only to the methods of the Entity class and should not be directly accessible to other classes using this entity. Such classes should refer only to methods (getter / setter methods or other business logic methods in the Entity class),
		
		9) The Enity class must contain a primary key, that is, an attribute or group of attributes that uniquely defines the record of this Enity class in the database.
		
11. What are the two types of elements in Entity classes. Or in other words, list two types of access (access) to the elements of the Entity classes.
		JPA indicates that it can work both with properties of classes (property), designed in the style of JavaBeans, or with fields (field), that is, class variables (instance variables). Accordingly, the type of access will be either property access or field access.
		
12. What is the attribute of the Entity class in JPA terminology?
		JPA indicates that it can work both with properties of classes (property), designed in the style of JavaBeans, or with fields (field), that is, class variables (instance variables). Both types of elements of the Entity class are called attributes of the Entity class.
		
13. What data types are allowed in the attributes of the Entity class (fields or properties)?
		Valid attribute types for Entity classes are:
		
		primitive types and their Java wrappers,
		strings,
		any Java serializable types (implementing the Serializable interface),
		enums;
		entity types;
		embeddable classes
		and collection types 1-6

14. What data types can be used in the attributes included in the primary key of the Entity class (composite or simple) so that the resulting primary key can be used for any database? And in the case of auto-generated primary key (generated primary keys)?
		Valid attribute types included in the primary key are:
		
		primitive types and their Java wrappers,
		strings,
		BigDecimal and BigInteger,
		java.util.Date and java.sql.Date
		In the case of an auto-generated primary key (generated primary keys), only numeric types are allowed.
		
		If other types of data are used in the primary key, it can work only for some databases, i.e. becomes not portable (not portable).
		
15. What is the Embeddable class?
		An embeddable class is a class that is not used by itself, only as part of one or more Entity classes. An entity class can contain both single embedded classes and collections of such classes. Also such classes can be used as keys or map values. At run time, each embedded class belongs to only one object of the Entity class and cannot be used to transfer data between the objects of the Entity classes (that is, such a class is not a common data structure for different objects). In general, such a class serves to make the definition of common attributes for several Entity, we can assume that JPA simply embeds into the Entity instead of an object of this class, the attributes it contains.
		
16. Can the Embeddable class contain another Embeddable class?
		Yes maybe.
		
17. Can the Embeddable class contain relationships with other Entity or Entity collections? If it can, are there any restrictions on such relationships?
		Maybe, but only if such a class is not used as the primary key or the map key.
		
18. What requirements does JPA set for Embeddable classes?
		Such classes must satisfy the same rules as the Entity classes, except that they do not have to contain a primary key and be marked with the Entity annotation (see question 10),
		The Embeddable class must be marked with the Embeddable annotation or described in the XML configuration file JPA.
		19. What types of connections (relationship) between Entity do you know (list eight types, or specify four types of connections, each of which can be further divided into two types)?
		There are four types of connections
		
		1. OneToOne (one-to-one connection, that is, one Entity object can be associated with no more than one object of another Entity),
		
		OneToMany (one-to-many connection, one Entity object can be associated with a whole collection of Entity)
		ManyToOne (many to one link, feedback for OneToMany),
		ManyToMany (many to many link) Each of which can be divided into two types:
		Bidirectional
		Unidirectional – a link to a link is set for all Entity, that is, in the case of OneToOne AB, Entity A has a link to Entity B, Entity B has a link to Entity A, Entity A is considered the owner of this link (this is important for cases of cascading data deletion , then deleting A will also delete B, but not vice versa). Undirectional- link to link is established only on one side, that is, in the case of OneToOne AB only Entity A will have link to Entity B, Entity B will not have link to A .
		Java Persistence API Interview Questions Ans Answers
		20. What is Mapped Superclass?
		Mapped Superclass is a class from which Entity is inherited, it may contain JPA annotations, however such a class is not Entity, it does not have to fulfill all the requirements set for Entity (for example, it may not contain a primary key). Such a class cannot be used in EntityManager or Query operations. Such a class should be marked with the MappedSuperclass annotation or, respectively, described in the xml file.
		
21. What are the three types of Inheritance Mapping Strategies described in JPA?
		JPA describes three inheritance mapping strategies (Inheritance Mapping Strategies), that is, how JPA will work with the classes derived from the Entity:
		
		1) one table for the entire inheritance hierarchy ( a single table per class hierarchy ) – all enity one table, to identify the type of entity is determined by a special column “discriminator column” . For example, if there is an entity Animals with the descendant classes Cats and Dogs, with such a strategy, all entities are recorded in the Animals table, but they have an additional column, animalType, in which the value “cat” or “dog” is written respectively. Minusis that in the general table, all fields unique for each of the descendant classes will be created, which will be empty for all other descendant classes. For example, in the table of animals there will be the speed of climbing a tree from cats and whether the dog can bring sneakers from dogs, which will always be null for a dog and cat, respectively.
		
		2) unifying strategy ( joined subclass strategy ) – in this strategy, each enity class stores data in its own table, but only unique columns (not inherited from ancestor classes) and the primary key, and all inherited columns are written to ancestor class tables a relationship is established between these tables, for example, in the case of the Animals classes (see above), there will be three tables of animals, cats, dogs, and only the key and speed of climbing will be recorded in cats, in dogs – the key and whether the dog can bring a stick , and in animals all the rest of the data of cats and dogs are c links th to the appropriate table. The downside is the performance loss from joining tables (join) for any operations.
		
		3) one table for each class ( table per concrete class strategy ) – everything is simple here every individual class of successor has its own table, i.e. for cats and dogs (see above), all data will be recorded simply in the tables cats and dogs as if they did not have a common superclass at all. The downside is poor support for polymorphism (polymorphic relationships) and the fact that selecting all the classes in the hierarchy will require a large number of separate sql queries or using a UNION query.
		
22. What are the two types of fetch strategies in JPA do you know?
		JPA describes two types of fetch strategies:
		
		1) LAZY – these fields will be loaded only during the first access to this field,
		
		2) EAGER – these fields will be loaded immediately.
		
23. What is EntityManager and what are its main functions you can list?
		EntityManager is an interface that describes an API for all basic operations on Enitity, data retrieval and other JPA entities. Essentially the main API for working with JPA. Basic operations:
		
		1) For operations on Entity: persist (adding Entity under JPA control), merge (updating), remove (delete), refresh (updating data), detach (removing from management JPA), lock (blocking Enity from changes in other thread),
		
		2) data Preparation: find (search and retrieval entity), createQuery, createNamedQuery, createNativeQuery , contains, createNamedStoredProcedureQuery, createStoredProcedureQuery
		
		3) Preparation of other entities JPA: getTransaction, getEntityManagerFactory, getCriteriaBuilder, getMetamodel, getDelegate
		
		4) Work with EntityGraph: createEntityGraph, getEntityGraph
		
		4) General operations on EntityManager or all Entities: close, isOpen, getProperties, setProperty, clear.
		
24. What are the four lifecycle status of an Entity Instance’s Life Cycle you can list?
		An Entity object has four lifecycle status: new, managed, detached, or removed. Their description
		
		1) new – the object has been created but has not yet generated primary keys and has not yet been saved in the database,
		
		2) managed – the object has been created, managed by JPA, has generated primary keys,
		
		3) detached – the object has been created, but not managed (or no longer managed) JPA,
		
		4) removed – the object is created, managed by JPA, but will be deleted after commit’a transaction.